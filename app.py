# -*- coding: utf-8 -*-
"""App
Automatically generated by Colab.
Original file is located at
    https://colab.research.google.com/drive/1MEMvL6nHcgeVgUY0MjcLcgo7KTKbMEjD
"""

import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer
import gradio as gr
import os
import requests
import json

# Load dataset
df_base = pd.read_csv("Tubi-Data.csv")
df = pd.read_csv('Tubi_with_Personas_and_Clusters.csv')
df = df.merge(df_base[['Title', 'Title_URL']], on='Title', how='left')

# Combine features
df['Combined_Features'] = df.apply(lambda row: f"{row['Movie Genre']} {row['Movie Rating']} {row['Movie Length (Minutes)']}", axis=1)

# TF-IDF
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(df['Combined_Features'])
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

PERSONA_BOOST = 0.2
title_to_index = pd.Series(df.index, index=df['Title']).to_dict()

def recommend_movies_with_persona_boost(movie_title, top_n=5):
    if movie_title not in title_to_index:
        return []

    idx = title_to_index[movie_title]
    target_persona = df.iloc[idx]['Persona']

    sim_scores = list(enumerate(cosine_sim[idx]))
    boosted_scores = []
    for i, score in sim_scores:
        if i == idx:
            continue
        persona_bonus = PERSONA_BOOST if df.iloc[i]['Persona'] == target_persona else 0
        boosted_score = score + persona_bonus
        boosted_scores.append((i, boosted_score))

    boosted_scores = sorted(boosted_scores, key=lambda x: x[1], reverse=True)
    return [df.iloc[i]['Title'] for i, _ in boosted_scores[:top_n]]

def generate_explanation(movie_title, persona, recommended_movies):
    api_key = os.getenv("OPENAI_API_KEY")  # Use Hugging Face secret

    recommended_list_str = ', '.join(recommended_movies)

persona_descriptions = {
    "Family Friendly": "Fans who enjoy wholesome, lighthearted movies that are suitable for all ages, often with positive messages and family-centric themes.",
    "Action Junkies": "Fans who crave fast-paced, action-packed, adrenaline-filled movies with thrilling sequences and intense moments.",
    "Drama Lovers": "Fans who appreciate emotional, character-driven stories with deep plots, meaningful conflicts, and strong performances.",
    "Nostalgia Fans": "Fans who love revisiting classic films, retro favorites, and stories that capture the charm and style of past decades.",
    "Documentary Seekers": "Fans who love documentaries, nature films, and educational content that explores real-world topics, history, and culture."
}

def generate_explanation(movie_title, persona, recommended_movies):
    api_key = os.getenv("OPENAI_API_KEY")  # Use Hugging Face secret

    recommended_list_str = ', '.join(recommended_movies)

    # Use descriptive persona (fallback if persona not found)
    persona_desc = persona_descriptions.get(persona, f"Fans who enjoy movies similar to '{movie_title}'")

    prompt = (
        f"The user enjoys the movie '{movie_title}', which aligns with this persona: '{persona_desc}'. "
        f"Based on this persona and the following recommended movies: {recommended_list_str}, "
        "please explain why these specific movies match the user's taste. "
        "Do not use markdown formatting like **. Just list the movies with numbers and provide plain English explanations. "
        "Ensure you discuss all 5 recommended movies directly, and explain how they match the persona."
    )

    url = "https://api.openai.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "gpt-3.5-turbo",
        "messages": [
            {"role": "system", "content": "You are a helpful movie recommendation expert."},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 500,
        "temperature": 0.7
    }

    try:
        response = requests.post(url, headers=headers, json=payload)
        response_json = response.json()

        if 'choices' not in response_json:
            print(f"Unexpected response from OpenAI: {response_json}")
            return f"Error from OpenAI: {response_json.get('error', 'Unknown error')}"

        explanation = response_json['choices'][0]['message']['content'].strip()
        return explanation
    except Exception as e:
        print(f"OpenAI API Error: {e}")
        return "Error getting explanation from AI."



def get_recommendations(movie):
    recommended_movies = recommend_movies_with_persona_boost(movie)
    if not recommended_movies:
        return "Movie not found.", "No explanation."
    
    persona = df.loc[df['Title'] == movie, 'Persona'].values[0]
    links = [f"[{m}]({df.loc[df['Title'] == m, 'Title_URL'].values[0]})" for m in recommended_movies]
    
    # Formatted recommendations with heading
    formatted_recs = f"### ðŸŽ¬ If you liked *{movie}*, you may also like:\n\n" + "\n".join([f"- {link}" for link in links])

    explanation = generate_explanation(movie, persona, recommended_movies)
    return formatted_recs, explanation

with gr.Blocks() as demo:
    gr.Markdown("# Tubi Movie Recommender + AI Explanation")

    dropdown = gr.Dropdown(choices=df['Title'].tolist(), label="Select a Movie")
    btn = gr.Button("Get Recommendations")

    recs = gr.Markdown(label="Top 5 Recommendations")  # This will show the formatted list
    expl = gr.Markdown(label="AI Explanation")

    btn.click(get_recommendations, dropdown, [recs, expl])

demo.launch()
